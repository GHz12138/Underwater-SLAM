// Generated by gencpp from file imagenex831l/ProcessedRange.msg
// DO NOT EDIT!


#ifndef IMAGENEX831L_MESSAGE_PROCESSEDRANGE_H
#define IMAGENEX831L_MESSAGE_PROCESSEDRANGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace imagenex831l
{
template <class ContainerAllocator>
struct ProcessedRange_
{
  typedef ProcessedRange_<ContainerAllocator> Type;

  ProcessedRange_()
    : header()
    , intensity()
    , range_error(false)
    , frequency_error(false)
    , internal_error(false)
    , switches_accepted(false)
    , head_position(0.0)
    , step_direction(false)
    , max_range(0.0)
    , profile_range(0)
    , roll_angle(0.0)
    , pitch_angle(0.0)
    , roll_acceleration(0.0)
    , pitch_acceleration(0.0)  {
    }
  ProcessedRange_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , intensity(_alloc)
    , range_error(false)
    , frequency_error(false)
    , internal_error(false)
    , switches_accepted(false)
    , head_position(0.0)
    , step_direction(false)
    , max_range(0.0)
    , profile_range(0)
    , roll_angle(0.0)
    , pitch_angle(0.0)
    , roll_acceleration(0.0)
    , pitch_acceleration(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _intensity_type;
  _intensity_type intensity;

   typedef uint8_t _range_error_type;
  _range_error_type range_error;

   typedef uint8_t _frequency_error_type;
  _frequency_error_type frequency_error;

   typedef uint8_t _internal_error_type;
  _internal_error_type internal_error;

   typedef uint8_t _switches_accepted_type;
  _switches_accepted_type switches_accepted;

   typedef float _head_position_type;
  _head_position_type head_position;

   typedef uint8_t _step_direction_type;
  _step_direction_type step_direction;

   typedef float _max_range_type;
  _max_range_type max_range;

   typedef uint16_t _profile_range_type;
  _profile_range_type profile_range;

   typedef float _roll_angle_type;
  _roll_angle_type roll_angle;

   typedef float _pitch_angle_type;
  _pitch_angle_type pitch_angle;

   typedef float _roll_acceleration_type;
  _roll_acceleration_type roll_acceleration;

   typedef float _pitch_acceleration_type;
  _pitch_acceleration_type pitch_acceleration;





  typedef boost::shared_ptr< ::imagenex831l::ProcessedRange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imagenex831l::ProcessedRange_<ContainerAllocator> const> ConstPtr;

}; // struct ProcessedRange_

typedef ::imagenex831l::ProcessedRange_<std::allocator<void> > ProcessedRange;

typedef boost::shared_ptr< ::imagenex831l::ProcessedRange > ProcessedRangePtr;
typedef boost::shared_ptr< ::imagenex831l::ProcessedRange const> ProcessedRangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imagenex831l::ProcessedRange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imagenex831l::ProcessedRange_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::imagenex831l::ProcessedRange_<ContainerAllocator1> & lhs, const ::imagenex831l::ProcessedRange_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.intensity == rhs.intensity &&
    lhs.range_error == rhs.range_error &&
    lhs.frequency_error == rhs.frequency_error &&
    lhs.internal_error == rhs.internal_error &&
    lhs.switches_accepted == rhs.switches_accepted &&
    lhs.head_position == rhs.head_position &&
    lhs.step_direction == rhs.step_direction &&
    lhs.max_range == rhs.max_range &&
    lhs.profile_range == rhs.profile_range &&
    lhs.roll_angle == rhs.roll_angle &&
    lhs.pitch_angle == rhs.pitch_angle &&
    lhs.roll_acceleration == rhs.roll_acceleration &&
    lhs.pitch_acceleration == rhs.pitch_acceleration;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::imagenex831l::ProcessedRange_<ContainerAllocator1> & lhs, const ::imagenex831l::ProcessedRange_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace imagenex831l

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::imagenex831l::ProcessedRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imagenex831l::ProcessedRange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imagenex831l::ProcessedRange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imagenex831l::ProcessedRange_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imagenex831l::ProcessedRange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imagenex831l::ProcessedRange_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imagenex831l::ProcessedRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5edca712f3e169a5e30eb8cfb395c75";
  }

  static const char* value(const ::imagenex831l::ProcessedRange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5edca712f3e169aULL;
  static const uint64_t static_value2 = 0x5e30eb8cfb395c75ULL;
};

template<class ContainerAllocator>
struct DataType< ::imagenex831l::ProcessedRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imagenex831l/ProcessedRange";
  }

  static const char* value(const ::imagenex831l::ProcessedRange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imagenex831l::ProcessedRange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Processed echo data from sonar.\n"
"std_msgs/Header header\n"
"uint8[] intensity # intensity.\n"
"\n"
"bool range_error\n"
"bool frequency_error\n"
"bool internal_error\n"
"bool switches_accepted\n"
"\n"
"float32 head_position\n"
"bool step_direction # 0 ccw, 1 cw.\n"
"float32 max_range\n"
"uint16 profile_range\n"
"\n"
"float32 roll_angle\n"
"float32 pitch_angle\n"
"float32 roll_acceleration\n"
"float32 pitch_acceleration\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::imagenex831l::ProcessedRange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imagenex831l::ProcessedRange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.intensity);
      stream.next(m.range_error);
      stream.next(m.frequency_error);
      stream.next(m.internal_error);
      stream.next(m.switches_accepted);
      stream.next(m.head_position);
      stream.next(m.step_direction);
      stream.next(m.max_range);
      stream.next(m.profile_range);
      stream.next(m.roll_angle);
      stream.next(m.pitch_angle);
      stream.next(m.roll_acceleration);
      stream.next(m.pitch_acceleration);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcessedRange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imagenex831l::ProcessedRange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imagenex831l::ProcessedRange_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "intensity[]" << std::endl;
    for (size_t i = 0; i < v.intensity.size(); ++i)
    {
      s << indent << "  intensity[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.intensity[i]);
    }
    s << indent << "range_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.range_error);
    s << indent << "frequency_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.frequency_error);
    s << indent << "internal_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.internal_error);
    s << indent << "switches_accepted: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.switches_accepted);
    s << indent << "head_position: ";
    Printer<float>::stream(s, indent + "  ", v.head_position);
    s << indent << "step_direction: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.step_direction);
    s << indent << "max_range: ";
    Printer<float>::stream(s, indent + "  ", v.max_range);
    s << indent << "profile_range: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.profile_range);
    s << indent << "roll_angle: ";
    Printer<float>::stream(s, indent + "  ", v.roll_angle);
    s << indent << "pitch_angle: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_angle);
    s << indent << "roll_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.roll_acceleration);
    s << indent << "pitch_acceleration: ";
    Printer<float>::stream(s, indent + "  ", v.pitch_acceleration);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGENEX831L_MESSAGE_PROCESSEDRANGE_H
