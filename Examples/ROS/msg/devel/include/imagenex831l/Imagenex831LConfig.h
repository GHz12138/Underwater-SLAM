//#line 2 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the imagenex831l package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __imagenex831l__IMAGENEX831LCONFIG_H__
#define __imagenex831l__IMAGENEX831LCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace imagenex831l
{
  class Imagenex831LConfigStatics;

  class Imagenex831LConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }
      virtual ~AbstractParamDescription() = default;

      virtual void clamp(Imagenex831LConfig &config, const Imagenex831LConfig &max, const Imagenex831LConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const Imagenex831LConfig &config1, const Imagenex831LConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, Imagenex831LConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const Imagenex831LConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Imagenex831LConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const Imagenex831LConfig &config) const = 0;
      virtual void getValue(const Imagenex831LConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T Imagenex831LConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T Imagenex831LConfig::* field;

      virtual void clamp(Imagenex831LConfig &config, const Imagenex831LConfig &max, const Imagenex831LConfig &min) const override
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const Imagenex831LConfig &config1, const Imagenex831LConfig &config2) const override
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, Imagenex831LConfig &config) const override
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const Imagenex831LConfig &config) const override
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, Imagenex831LConfig &config) const override
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const Imagenex831LConfig &config) const override
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const Imagenex831LConfig &config, boost::any &val) const override
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      virtual ~AbstractGroupDescription() = default;

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, Imagenex831LConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, Imagenex831LConfig &top) const override
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const override
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<Imagenex831LConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(Imagenex831LConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("max_range"==(*_i)->name){max_range = boost::any_cast<int>(val);}
        if("step_direction"==(*_i)->name){step_direction = boost::any_cast<int>(val);}
        if("start_gain"==(*_i)->name){start_gain = boost::any_cast<int>(val);}
        if("absorption"==(*_i)->name){absorption = boost::any_cast<int>(val);}
        if("train_angle"==(*_i)->name){train_angle = boost::any_cast<int>(val);}
        if("sector_width"==(*_i)->name){sector_width = boost::any_cast<int>(val);}
        if("step_size"==(*_i)->name){step_size = boost::any_cast<int>(val);}
        if("pulse"==(*_i)->name){pulse = boost::any_cast<int>(val);}
        if("min_range"==(*_i)->name){min_range = boost::any_cast<int>(val);}
        if("pitch_roll_mode"==(*_i)->name){pitch_roll_mode = boost::any_cast<int>(val);}
        if("profile_mode"==(*_i)->name){profile_mode = boost::any_cast<int>(val);}
        if("motor_mode"==(*_i)->name){motor_mode = boost::any_cast<int>(val);}
        if("frequency"==(*_i)->name){frequency = boost::any_cast<int>(val);}
      }
    }

    int max_range;
int step_direction;
int start_gain;
int absorption;
int train_angle;
int sector_width;
int step_size;
int pulse;
int min_range;
int pitch_roll_mode;
int profile_mode;
int motor_mode;
int frequency;

    bool state;
    std::string name;

    
}groups;



//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int max_range;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int step_direction;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int start_gain;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int absorption;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int train_angle;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int sector_width;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int step_size;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int pulse;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int min_range;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int pitch_roll_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int profile_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int motor_mode;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      int frequency;
//#line 231 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("Imagenex831LConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const Imagenex831LConfig &__max__ = __getMax__();
      const Imagenex831LConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const Imagenex831LConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const Imagenex831LConfig &__getDefault__();
    static const Imagenex831LConfig &__getMax__();
    static const Imagenex831LConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const Imagenex831LConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void Imagenex831LConfig::ParamDescription<std::string>::clamp(Imagenex831LConfig &config, const Imagenex831LConfig &max, const Imagenex831LConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class Imagenex831LConfigStatics
  {
    friend class Imagenex831LConfig;

    Imagenex831LConfigStatics()
    {
Imagenex831LConfig::GroupDescription<Imagenex831LConfig::DEFAULT, Imagenex831LConfig> Default("Default", "", 0, 0, true, &Imagenex831LConfig::groups);
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.max_range = -2147483648;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.max_range = 2147483647;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.max_range = 60;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("max_range", "int", 0, "Max range in the request (byte 3).", "{'enum': [{'name': 'MAX_RANGE_ID_2', 'type': 'int', 'value': 2, 'srcline': 34, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.125 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_4', 'type': 'int', 'value': 4, 'srcline': 35, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.25 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_6', 'type': 'int', 'value': 6, 'srcline': 36, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.5 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_8', 'type': 'int', 'value': 8, 'srcline': 37, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.75 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_10', 'type': 'int', 'value': 10, 'srcline': 38, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '1 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_20', 'type': 'int', 'value': 20, 'srcline': 39, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '2 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_30', 'type': 'int', 'value': 30, 'srcline': 40, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '3 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_40', 'type': 'int', 'value': 40, 'srcline': 41, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '4 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_50', 'type': 'int', 'value': 50, 'srcline': 42, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '5 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_60', 'type': 'int', 'value': 60, 'srcline': 43, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '6 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Max range values.'}", &Imagenex831LConfig::max_range)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("max_range", "int", 0, "Max range in the request (byte 3).", "{'enum': [{'name': 'MAX_RANGE_ID_2', 'type': 'int', 'value': 2, 'srcline': 34, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.125 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_4', 'type': 'int', 'value': 4, 'srcline': 35, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.25 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_6', 'type': 'int', 'value': 6, 'srcline': 36, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.5 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_8', 'type': 'int', 'value': 8, 'srcline': 37, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.75 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_10', 'type': 'int', 'value': 10, 'srcline': 38, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '1 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_20', 'type': 'int', 'value': 20, 'srcline': 39, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '2 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_30', 'type': 'int', 'value': 30, 'srcline': 40, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '3 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_40', 'type': 'int', 'value': 40, 'srcline': 41, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '4 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_50', 'type': 'int', 'value': 50, 'srcline': 42, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '5 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MAX_RANGE_ID_60', 'type': 'int', 'value': 60, 'srcline': 43, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '6 m max range.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Max range values.'}", &Imagenex831LConfig::max_range)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.step_direction = -2147483648;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.step_direction = 2147483647;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.step_direction = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("step_direction", "int", 0, "Step direction (byte 5).", "{'enum': [{'name': 'STEP_DIRECTION_0', 'type': 'int', 'value': 0, 'srcline': 50, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Normal operation.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'STEP_DIRECTION_1', 'type': 'int', 'value': 1, 'srcline': 51, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Reverse step direction.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Step direction.'}", &Imagenex831LConfig::step_direction)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("step_direction", "int", 0, "Step direction (byte 5).", "{'enum': [{'name': 'STEP_DIRECTION_0', 'type': 'int', 'value': 0, 'srcline': 50, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Normal operation.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'STEP_DIRECTION_1', 'type': 'int', 'value': 1, 'srcline': 51, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Reverse step direction.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Step direction.'}", &Imagenex831LConfig::step_direction)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.start_gain = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.start_gain = 40;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.start_gain = 20;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("start_gain", "int", 0, "Start gain (1dB increment).", "", &Imagenex831LConfig::start_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("start_gain", "int", 0, "Start gain (1dB increment).", "", &Imagenex831LConfig::start_gain)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.absorption = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.absorption = 255;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.absorption = 17;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("absorption", "int", 0, "absorption in dB per m.", "", &Imagenex831LConfig::absorption)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("absorption", "int", 0, "absorption in dB per m.", "", &Imagenex831LConfig::absorption)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.train_angle = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.train_angle = 120;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.train_angle = 120;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("train_angle", "int", 0, "Train angle, which is the offset for the sector width (degree),         steps of 3 degrees.", "", &Imagenex831LConfig::train_angle)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("train_angle", "int", 0, "Train angle, which is the offset for the sector width (degree),         steps of 3 degrees.", "", &Imagenex831LConfig::train_angle)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.sector_width = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.sector_width = 120;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.sector_width = 120;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("sector_width", "int", 0, "Field of view covered by the sensor (degree), steps of 3 degrees.", "", &Imagenex831LConfig::sector_width)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("sector_width", "int", 0, "Field of view covered by the sensor (degree), steps of 3 degrees.", "", &Imagenex831LConfig::sector_width)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.step_size = -2147483648;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.step_size = 2147483647;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.step_size = 3;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("step_size", "int", 0, "Step size.", "{'enum': [{'name': 'STEP_SIZE_0', 'type': 'int', 'value': 0, 'srcline': 76, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'No step.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'STEP_SIZE_1', 'type': 'int', 'value': 3, 'srcline': 77, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.9 degrees/step.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Step size.'}", &Imagenex831LConfig::step_size)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("step_size", "int", 0, "Step size.", "{'enum': [{'name': 'STEP_SIZE_0', 'type': 'int', 'value': 0, 'srcline': 76, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'No step.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'STEP_SIZE_1', 'type': 'int', 'value': 3, 'srcline': 77, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': '0.9 degrees/step.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Step size.'}", &Imagenex831LConfig::step_size)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pulse = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pulse = 100;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pulse = 10;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("pulse", "int", 0, "Pulse length in microseconds.", "", &Imagenex831LConfig::pulse)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("pulse", "int", 0, "Pulse length in microseconds.", "", &Imagenex831LConfig::pulse)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.min_range = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.min_range = 250;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.min_range = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("min_range", "int", 0, "Min range in meters [0, 250]cm; value in cm.", "", &Imagenex831LConfig::min_range)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("min_range", "int", 0, "Min range in meters [0, 250]cm; value in cm.", "", &Imagenex831LConfig::min_range)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.pitch_roll_mode = -2147483648;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.pitch_roll_mode = 2147483647;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.pitch_roll_mode = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("pitch_roll_mode", "int", 0, "Pitch roll mode.", "{'enum': [{'name': 'PR_MODE_0', 'type': 'int', 'value': 0, 'srcline': 94, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Interrogate pitch/roll sensor.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'PR_MODE_1', 'type': 'int', 'value': 1, 'srcline': 95, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Calibration pitch/roll sensor.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Pitch/roll sensor mode.'}", &Imagenex831LConfig::pitch_roll_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("pitch_roll_mode", "int", 0, "Pitch roll mode.", "{'enum': [{'name': 'PR_MODE_0', 'type': 'int', 'value': 0, 'srcline': 94, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Interrogate pitch/roll sensor.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'PR_MODE_1', 'type': 'int', 'value': 1, 'srcline': 95, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Calibration pitch/roll sensor.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Pitch/roll sensor mode.'}", &Imagenex831LConfig::pitch_roll_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.profile_mode = -2147483648;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.profile_mode = 2147483647;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.profile_mode = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("profile_mode", "int", 0, "Profile mode.", "{'enum': [{'name': 'PROFILE_MODE_0', 'type': 'int', 'value': 0, 'srcline': 102, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Profile off.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'PROFILE_MODE_1', 'type': 'int', 'value': 1, 'srcline': 103, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Profile on.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Profile mode.'}", &Imagenex831LConfig::profile_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("profile_mode", "int", 0, "Profile mode.", "{'enum': [{'name': 'PROFILE_MODE_0', 'type': 'int', 'value': 0, 'srcline': 102, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Profile off.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'PROFILE_MODE_1', 'type': 'int', 'value': 1, 'srcline': 103, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Profile on.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Profile mode.'}", &Imagenex831LConfig::profile_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.motor_mode = -2147483648;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.motor_mode = 2147483647;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.motor_mode = 0;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("motor_mode", "int", 0, "Motor mode.", "{'enum': [{'name': 'MOTOR_MODE_0', 'type': 'int', 'value': 0, 'srcline': 110, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Normal operation.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MOTOR_MODE_1', 'type': 'int', 'value': 1, 'srcline': 111, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Calibrate sonar head transducer.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Profile mode.'}", &Imagenex831LConfig::motor_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("motor_mode", "int", 0, "Motor mode.", "{'enum': [{'name': 'MOTOR_MODE_0', 'type': 'int', 'value': 0, 'srcline': 110, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Normal operation.', 'ctype': 'int', 'cconsttype': 'const int'}, {'name': 'MOTOR_MODE_1', 'type': 'int', 'value': 1, 'srcline': 111, 'srcfile': '/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg', 'description': 'Calibrate sonar head transducer.', 'ctype': 'int', 'cconsttype': 'const int'}], 'enum_description': 'Profile mode.'}", &Imagenex831LConfig::motor_mode)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __min__.frequency = 2150;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __max__.frequency = 2350;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __default__.frequency = 2250;
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.abstract_parameters.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("frequency", "int", 0, "Frequency (kHz), 5kHz step.", "", &Imagenex831LConfig::frequency)));
//#line 291 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __param_descriptions__.push_back(Imagenex831LConfig::AbstractParamDescriptionConstPtr(new Imagenex831LConfig::ParamDescription<int>("frequency", "int", 0, "Frequency (kHz), 5kHz step.", "", &Imagenex831LConfig::frequency)));
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/noetic/lib/python3/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(Imagenex831LConfig::AbstractGroupDescriptionConstPtr(new Imagenex831LConfig::GroupDescription<Imagenex831LConfig::DEFAULT, Imagenex831LConfig>(Default)));
//#line 369 "/opt/ros/noetic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<Imagenex831LConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<Imagenex831LConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<Imagenex831LConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    Imagenex831LConfig __max__;
    Imagenex831LConfig __min__;
    Imagenex831LConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const Imagenex831LConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static Imagenex831LConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &Imagenex831LConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const Imagenex831LConfig &Imagenex831LConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const Imagenex831LConfig &Imagenex831LConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const Imagenex831LConfig &Imagenex831LConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<Imagenex831LConfig::AbstractParamDescriptionConstPtr> &Imagenex831LConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<Imagenex831LConfig::AbstractGroupDescriptionConstPtr> &Imagenex831LConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const Imagenex831LConfigStatics *Imagenex831LConfig::__get_statics__()
  {
    const static Imagenex831LConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = Imagenex831LConfigStatics::get_instance();

    return statics;
  }

//#line 34 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_2 = 2;
//#line 35 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_4 = 4;
//#line 36 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_6 = 6;
//#line 37 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_8 = 8;
//#line 38 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_10 = 10;
//#line 39 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_20 = 20;
//#line 40 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_30 = 30;
//#line 41 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_40 = 40;
//#line 42 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_50 = 50;
//#line 43 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MAX_RANGE_ID_60 = 60;
//#line 50 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_STEP_DIRECTION_0 = 0;
//#line 51 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_STEP_DIRECTION_1 = 1;
//#line 76 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_STEP_SIZE_0 = 0;
//#line 77 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_STEP_SIZE_1 = 3;
//#line 94 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_PR_MODE_0 = 0;
//#line 95 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_PR_MODE_1 = 1;
//#line 102 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_PROFILE_MODE_0 = 0;
//#line 103 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_PROFILE_MODE_1 = 1;
//#line 110 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MOTOR_MODE_0 = 0;
//#line 111 "/ORB_SLAM3/Examples/ROS/msg/src/imagenex831l/cfg/Imagenex831L.cfg"
      const int Imagenex831L_MOTOR_MODE_1 = 1;
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __IMAGENEX831LRECONFIGURATOR_H__
